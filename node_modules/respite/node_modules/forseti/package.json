{
  "name": "forseti",
  "version": "1.0.6",
  "description": "json validator",
  "directories": {
    "test": "test"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/LoveKino/forseti.git"
  },
  "keywords": [
    "json",
    "validator",
    "json correctness",
    "validity"
  ],
  "license": "MIT",
  "author": {
    "name": "ddchen",
    "email": "842914439@qq.com"
  },
  "readme": "forseti\r\n===================================\r\nA new way to validate a json format data.\r\n\r\nWhat is json format data validation?\r\n-----------------------------------\r\nAssume there is a json type data, I do not know it's correct or not. So I will validate this json.\r\nFor example, I get two json fomat data:\r\n```\r\nA:{\r\n\t\"name\": \"ddchen\",\r\n\t\"age\": 25\r\n}\r\n```\r\nand \r\n```\r\nB:{\r\n\t\"name\": \"ddchen\",\r\n\t\"age\": \"25\"\r\n}\r\n```\r\nI got a rule that age must be a number, so json A is right and json B is wrong.\r\nThis kind of procedure is json format data validation, we make a judgment that which json is right and which is wrong.\r\n\r\nIn this example, A and B are source json. \"age must be a number\" is a validation rule. Validation rules is a group of validation rule. Because A satisfy validation rules, so A is right. B do not satisfy one of validation rules, so B is wrong.\r\n\r\nHow does forseti deal with validation?\r\n-----------------------------------\r\nIt looks like this:\r\n```\r\nvar jsonValidator = require(\"forseti\");\r\n\r\nvar sourceJson = {\r\n\tname: \"ddchen\",\r\n\tphone: \"12345678\",\r\n\thobitts: [{\r\n\t\ttype: \"sleep\",\r\n\t\tlevel: 5\r\n\t}],\r\n\tnext: []\r\n}\r\n\r\nvar m = jsonValidator.createMarker(true);\r\nvar sample = {\r\n\tname: m.um(\"ddchen\"),\r\n\thobitts: [{\r\n\t\tlevel: m.ian(5)\r\n\t}],\r\n\tnext: m.iaa([])\r\n}\r\n\r\nvar result = jsonValidator.validate(sourceJson, sample);\r\n\r\nconsole.log(result);\r\n\r\n// console show:\r\n// {\r\n//    pass: true\r\n// }\r\n\r\n```\r\nLet's look at the code line by line.\r\n### import forseti\r\n```\r\nvar jsonValidator = require(\"forseti\");\r\n```\r\nBefore import forseti, you need to install it.\r\n```\r\nnpm install forseti\r\n```\r\n### get source json\r\n```\r\nvar sourceJson = {\r\n\tname: \"ddchen\",\r\n\tphone: \"12345678\",\r\n\thobitts: [{\r\n\t\ttype: \"sleep\",\r\n\t\tlevel: 5\r\n\t}],\r\n\tnext: []\r\n}\r\n```\r\nThis is a definition of source json. Actually, you can get source json from any business scenarios like ajax, server layer.\r\n### create a maker\r\n```\r\nvar m = jsonValidator.createMarker(true);\r\n```\r\nMaker is a special object which used to flag attribute. When you pass a \"ture\" to createMarker, you got a working maker.\r\nWe will see how to use maker in the next paragraph.\r\n### define sample\r\n```\r\nvar sample = {\r\n\tname: m.um(\"ddchen\"),\r\n\thobitts: [{\r\n\t\tlevel: m.ian(5)\r\n\t}],\r\n\tnext: m.iaa([])\r\n}\r\n```\r\nSample is the key to define validation rules. Sample looks similar to sourceJson, but there are some Differences.\r\n* missing some attributes\r\n* there are some special sentances like 'name: m.um(\"ddchen\")', 'level: m.ian(5)'.<br>\r\n\r\nM is a maker we defined in previous sentance. A maker contain a group of functions which you can be used to declare rules.\r\nFor example: \r\n* 'name: m.um(\"ddchen\")' mean attibute name is unmissing. (um is the shortcut of unmissing).\r\n* 'level: m.ian(5)' means attribute level is a number type. (ian is the shortcut of 'is a number').<br>\r\n\r\nRight now, we understand that by using function of a maker to wrapper an attribute, we can declare a validtion rule on the attribute.\r\nAbout maker, you need to know more:\r\n* we already defined a goup of functions.<br>\r\n```\r\n  um                shortcut of ummissing                           eg: m.um(value)\r\n  ian               shortcut of \"is a number\"                       eg: m.ian(value)\r\n  nu                shortcut of \"not null\"                          eg: m.nu(value)\r\n  iaa               shortcut of \"is a array\"                        eg: m.iaa(value)\r\n  inan              shortcut of \"is not a number\"                   eg: m.inan(value)\r\n  im                shortcut of \"is matching\"                       eg: m.im(value , regExp) regExp is a regular expression\r\n  ioo               shortcut of \"is one of\"                         eg: m.ioo(value , list)  list is a array\r\n  rpk               shortcut if \"repeated key\"                      eg: m.rpk(value) this one is special, see more next.\r\n```\r\n* you can define your own maker function in prototype level or instance level. We will talk about that later.<br>\r\n\r\n### validate json\r\n```\r\nvar result = jsonValidator.validate(sourceJson, sample);\r\n\r\nconsole.log(result);\r\n```\r\nSample stands for a group of validation rules. SourceJson is our source data. By call jsonValidator.validate, we get result.\r\nResult is an object which contains attribute pass and other. If pass is true means sourceJson satisfy validation rule. Otherwise, we get failInfo to present failing massage.\r\nFor example:<br>\r\n* right situdation\r\n```\r\n{\r\n    pass: true\r\n }\r\n```\r\n* wrong situation\r\n```\r\n{\r\n\t\"pass\": false,\r\n\t\"failInfo\": {\r\n\t\t\"position\": { //Where to fail.\r\n\t\t\t\"json\": {\r\n\t\t\t\t\"phone\": \"12345678\",\r\n\r\n\t\t\t},\r\n\t\t\t\"propName \": \"name \"\r\n\t\t},\r\n\t\t\"type \": \"um\" //Which kind of rule.\r\n\t}\r\n}\r\n```\r\n\r\nRight now, we know what forseti can do and how to use forseti. Next, we will talk how to expand validation rules.\r\n\r\nExpand validation rules\r\n-----------------------------------\r\nCustomize maker function in prototype level or instance level.\r\n\r\n### Customize maker in instance level\r\nWhen we get a maker, like that:\r\n```\r\nvar m = jsonValidator.createMarker(true);\r\n```\r\nWe can expand maker just for m (that's why we call that instance level).\r\nFor example:\r\n```\r\nvar m = jsonValidator.createMarker(true);\r\nm.addRule(\"inab\", {\r\n\tcheck: function(json, propName, extra) {\r\n\t\tvar value = json[propName];\r\n\t\treturn !(value === false || value === true);\r\n\t}\r\n});\r\n\r\n// then we can use that\r\nvar markedSample = {\r\n\tname: m.inab(\"ddchen\")\r\n};\r\n```\r\nor use a map\r\n```\r\nm.addRuleMap({\r\n\t\"inab\", {\r\n\t\tcheck: function(json, propName, extra) {\r\n\t\t\tvar value = json[propName];\r\n\t\t\treturn !(value === false || value === true);\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n\r\n### Customize maker in prototype level\r\nThis kind of customization is working for all maker.\r\nFor example:\r\n```\r\njsonValidator.registerMarkerType(\"um\", {\r\n\t\tcheck: function(json, propName, extra) {\r\n\t\t\treturn json.hasOwnProperty(propName);\r\n\t\t}\r\n\t);\r\n```\r\nOr use a map:\r\n```\r\njsonValidator.registerMarkerMap({\r\n\t\t\t\"um\": {\r\n\t\t\t\tcheck: function(json, propName, extra) {\r\n\t\t\t\t\treturn json.hasOwnProperty(propName);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"im\": { // shortcut of \"is matching\"\r\n\t\t\t\tcheck: function(json, propName, extra) {\r\n\t\t\t\t\tvar attrValue = json[propName];\r\n\t\t\t\t\tif (extra instanceof RegExp) {\r\n\t\t\t\t\t\treturn extra.test(attrValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n```\r\n\r\nAllow validation rule nest\r\n-----------------------------------\r\nAllow nest like: m.um(m.ian(value)), means value is \"um\" and \"ian\".\r\n\r\nSupport repeated key\r\n-----------------------------------\r\nLet's see an example:\r\n```\r\nA: {\r\n\t\"ddchen\":{\r\n\t\t\"age\":25\r\n\t},\r\n\t\"kino\":{\r\n\t\t\"age\":24\r\n\t},\r\n\t\"somebody\":{\r\n\t\t\"age\":100\r\n\t}\r\n}\r\n```\r\nFor this json, pattern is that every attribute of A is an object, and has an attribute of age which is a number. How to describle that kind of validation rule?\r\n\r\nDon't worry, we can use \"rpk\" to mark an attibute to flag that. \r\nsample: \r\n```\r\n{\r\n\t\"rkpName\":m.rpk({\r\n\t\tage:m.ian(5)\r\n\t})\r\n}\r\n```\r\n",
  "readmeFilename": "README.md",
  "gitHead": "5bc0f96c3a3aed549712a70af2a38b36c3b600ed",
  "bugs": {
    "url": "https://github.com/LoveKino/forseti/issues"
  },
  "homepage": "https://github.com/LoveKino/forseti#readme",
  "_id": "forseti@1.0.6",
  "_shasum": "fa18aa8c283f00f2efd32e6b8c390ae25b38775d",
  "_from": "forseti@*"
}
