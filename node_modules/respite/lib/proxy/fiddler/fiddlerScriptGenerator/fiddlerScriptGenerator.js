/**
 * @author  ddchen
 */

var path = require("path");
var fs = require("fs");

var CustomRulesTemplatePath = path.join(__dirname, "./CustomRules.jst");

var updateScript = function(conf) {
	console.log(("[info fiddler] start to update fiddler script.").green);
	var fiddlerScriptPath = conf.fiddlerScriptPath;
	var code = compile(conf);
	fs.unlinkSync(fiddlerScriptPath);
	try {
		fs.writeFileSync(fiddlerScriptPath, code);
		console.log("[info fiddler] fiddler script updated!".green);
	} catch (err) {
		console.log(("[info fiddler] " + err).red);
	}
}

var compile = function(conf) {
	var debugDomains = conf.debugDomains;
	if (!debugDomains || !debugDomains.length) {
		console.log("[info fiddler] missing debugDomains config!".red);
	}

	var customRulesTemplate = fs.readFileSync(CustomRulesTemplatePath, "utf-8");
	var filters = joinDomainsCode(debugDomains);
	console.log(("[info fiddler] filters::: " + filters).green);
	customRulesTemplate = customRulesTemplate.replace(/"\{\{hostnamefilters\}\}"/g, filters);
	customRulesTemplate = customRulesTemplate.replace(/"\{\{appPort\}\}"/g, conf.appPort);

	return customRulesTemplate;
}

var joinDomainsCode = function(debugDomains) {
	console.log(("[info fiddler] debug with domain " + debugDomains[0]).green);
	var code = 'oSession.HostnameIs("' + debugDomains[0] + '")';
	for (var i = 1; i < debugDomains.length; i++) {
		var debugDomain = debugDomains[i];
		var partCode = 'oSession.HostnameIs("' + debugDomain + '")';
		console.log(("[info fiddler] debug with domain " + debugDomains[i]).green);

		code += " || " + partCode;
	}
	return code;
}

module.exports = {
	updateScript: updateScript
}